#+TITLE: ob-jira

~ob-jira~ provides Babel functions for Jira JQL evaluation.

It uses the [[https://github.com/ankitpokhrel/jira-cli][JiraCLI]] program for communication with Jira.

* Configuration

See [[https://github.com/ankitpokhrel/jira-cli][JiraCLI]] page for instructions on how to install the program and configure it to authenticate to your Jira instance.

It should be sufficient to load the package to enable it, but the offical way to enable a language for Babel is like this:

#+begin_src emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages
                             '((emacs-lisp . t)
                               (jira . t)))
#+end_src

This would enable Babel for Emacs Lisp and JQL source code blocks.

* Parameters

Corresponding JiraCLI command line flags are in parenthesis. Unless otherwise given, the default is whatever is the default for JiraCLI.

- ~:config-file-path~ :: (~--config~) Alternative JiraCLI config file
- ~:project~ :: (~--project~) Comma separated lists of Jira projects. If not project is given the whole query will be wrapped in ~project IS NOT EMPTY AND (…)~, since that is what you have to do with JiraCLI to query across all projects. If there are more than one, it will be wrapped in ~project IN (…) AND (…)~. In other words the ~--project~ command line flag will only be used if there is a single project given as the parameter.
- ~:type~ :: (~--type~) Type :: (Bug, Task, &c.)
- ~:resolution~ :: (~--resolution~)
- ~:status~ :: (~--status~)
- ~:priority~ :: (~--priority~)
- ~:reporter~ :: (~--reporter~)
- ~:assignee~ :: (~--assignee~)
- ~:component~ :: (~--component~)
- ~:label~ :: (~--label~) Comma separated labels
- ~:parent~ :: (~--parent~)
- ~:history~ :: (~--history~)
- ~:watching~ :: (~--watching~)
- ~:created~ :: (~--created~)
- ~:updated~ :: (~--updated~)
- ~:created-after~ :: (~--created-after~)
- ~:updated-after~ :: (~--updated-after~)
- ~:created-before~ :: (~--created-before~)
- ~:updated-before~ :: (~--updated-before~)
- ~:order-by~ :: (~--order-by~) default: ~rank~
- ~:columns~ :: (~--columns~)
- ~:order~ :: (~--reverse~) Order, either ~+/asc/ascending~ or ~-/desc/descending~, defaults to ~ascending~. The default amounts to using the ~--reverse~ commandline flag for JiraCLI.

* Examples

Basic query with some parameters provided.

#+begin_src jql :columns KEY,SUMMARY :order ascending
assignee = currentUser() AND status != Closed
#+end_src

#+RESULTS:
#+begin_example
ABC-14392	Missing input validation
ABC-43891	Add calculator
#+end_example

Variables can be used as "functions" in the JQL.

#+NAME: xyz_tasks
#+begin_src jql :project XYZ :columns KEY,SUMMARY :order ascending :var user="bkhl"
assignee = user() AND status != Closed
#+end_src

#+RESULTS:
#+begin_example
XYZ-23035	Clicking play does nothing
XYZ-41894	Write user manual
#+end_example

This way, you can also reuse queries as using calls:

#+CALL: xyz_tasks(user="bob")

#+RESULTS:
#+begin_example
XYZ-41243	Prepare release party
#+end_example

* Limitations

Some parts of JQL is not supported, for example ~ORDER BY~ clauses. There are instead block parameters that can control ordering and such.

I'm not sure how much of this is quirks of JiraCLI as opposed to the Jira API. It could be that if I use this a lot it would be worth forking or submitting improvements to JiraCLI, or switch to using ~jiralib.el~ from [[https://github.com/ahungry/org-jira][org-jira]].

* TODOs

- Interpret ~ORDER BY~ and such from queries and convert into parameters, to allow more of the query to be written as actual JQL.
- Support saving results as tables.
